# -*- coding: utf-8 -*-
"""ProjetoCompleto_SabrinadaSilva_Imers√£o Alura

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12qO2J2UBwwpOtToBcewobcN0-WKNThVN
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai google-adk

# Configura√ß√£o da API Key do Google Gemini

import os
from google.colab import userdata
import google.generativeai as genai

# Configura√ß√£o da API Key do Google Gemini
GOOGLE_API_KEY = userdata.get("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    print("üö® Chave da API do Google n√£o encontrada! Configure a GOOGLE_API_KEY no Colab Secrets.")
    # Voc√™ pode querer interromper a execu√ß√£o aqui se a chave for crucial
    # exit()
else:
    os.environ["GOOGLE_API_KEY"] = GOOGLE_API_KEY
    genai.configure(api_key=GOOGLE_API_KEY) # Configura a API key para a biblioteca genai
    print("‚úÖ Chave da API do Google configurada.")

# -*- coding: utf-8 -*-
"""ProjetoCompleto_SabrinadaSilva_Imers√£o Alura

Geradao Automaticamente por Colab.

Arquivo original localizado em:
    https://colab.research.google.com/drive/12qO2J2UBwwpOtToBcewobcN0-WKNThVN
"""

# Configura o cliente da SDK do Gemini

from google import genai

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search as google_search_tool_instance # Renomeado para evitar conflito
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from google.generativeai import GenerativeModel # Importe GenerativeModel diretamente
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown, HTML # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings
import re


warnings.filterwarnings("ignore")

import asyncio

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
async def call_agent(agent: Agent, message_text: str) -> str: # Torne a fun√ß√£o ass√≠ncrona
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    async for event in runner.run(user_id="user1", session_id="session1", new_message=content): # Use async for e await
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# %%
#################################################
# --- Agente 1: Engajamento e Boas - Vindas --- #
#################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await generate_content
async def agente_boas_vindas():
    """Gera a mensagem de boas-vindas formatada para o usu√°rio."""
    prompt_boas_vindas = f"""
    Voc√™ √© um agente de engajamento e boas-vindas para um chatbot educacional.
    Sua fun√ß√£o √© iniciar a conversa de forma amig√°vel e explicar o prop√≥sito do chatbot,
    definindo expectativas sobre como ele pode ajudar os estudantes do ensino fundamental e m√©dio.

    Use a seguinte formata√ß√£o Markdown para sua mensagem:

    # Bem-vindo ao Chatbot Educacional Interativo! üëã

    Ol√°! Sou seu assistente virtual de aprendizado, criado para te ajudar a explorar os conte√∫dos escolares de uma forma diferente.

    <br>**Meu objetivo principal √© te ajudar a:**

    * Construir seu conhecimento de forma ativa e profunda.
    * Desenvolver seu pensamento cr√≠tico ao inv√©s de apenas copiar respostas.
    * Explorar os temas atrav√©s de perguntas desafiadoras e discuss√µes interessantes.
    * Utilizar informa√ß√µes de fontes confi√°veis e com refer√™ncias claras.

    <br>**Como posso te ajudar hoje?**

    Voc√™ pode me fazer perguntas sobre os temas que est√° estudando, pedir explica√ß√µes ou explorar novos conceitos. Lembre-se, meu foco √© te guiar na descoberta do conhecimento, ent√£o minhas respostas ser√£o mais como um guia do que uma resposta pronta.

    Para encerrar a conversa a qualquer momento, basta digitar 'sair', 'fim' ou 'adeus'.

    *Vamos come√ßar a aprender juntos! Qual assunto te interessa hoje?*<br>
    """

    print("DEBUG: Agente boas-vindas iniciado.")
    try:
        # Instancia corretamente o GenerativeModel
        # Use await aqui, pois generate_content √© ass√≠ncrono
        model = GenerativeModel(MODEL_ID) # Use a vari√°vel global MODEL_ID
        print(f"DEBUG: Tentando gerar conte√∫do com o modelo {MODEL_ID}...")
        response = await model.generate_content(prompt_boas_vindas)
        print("DEBUG: generate_content executado.")

        # Adicionando DEBUG para verificar o conte√∫do da resposta
        print(f"DEBUG: Objeto de resposta do modelo: {response}")
        if response and response.candidates and response.candidates[0].content.parts:
             print(f"DEBUG: Partes do conte√∫do encontradas.")
             # Acessa o texto da resposta de forma segura
             generated_text = response.text
             print(f"DEBUG: Texto gerado pelo modelo (primeiros 100 chars): {generated_text[:100]}...")
             return generated_text
        else:
             print("DEBUG: Nenhuma parte de conte√∫do de texto encontrada na resposta do modelo.")
             return "N√£o foi poss√≠vel gerar a mensagem de boas-vindas."

    except ConnectionError as e:
        print(f"DEBUG: Erro de conex√£o capturado: {e}")
        print(f"Erro de conex√£o ao tentar acessar a API do Gemini: {e}")
        return "Desculpe, n√£o consegui me conectar ao servi√ßo no momento. Por favor, tente novamente mais tarde."
    except Exception as e: # Captura outros erros inesperados
        print(f"DEBUG: Outro erro capturado: {e}")
        print(f"Ocorreu um erro ao gerar a mensagem de boas-vindas: {e}")
        return "Desculpe, ocorreu um erro interno ao iniciar."

# %%
############################################
# --- Agente 2: Questionamento Guiado  --- #
############################################

from google.adk.agents import Agent

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
async def agente_questionador(pergunta_inicial, historico_conversa=None):
    """
    Agente que recebe uma pergunta do estudante e formula perguntas de acompanhamento
    para guiar o aluno na constru√ß√£o do conhecimento (usando apenas google-adk).

    Args:
        pergunta_inicial (str): A pergunta inicial do estudante.
        historico_conversa (list, optional): Lista de intera√ß√µes anteriores
            (perguntas e respostas) para manter o contexto. Defaults to None.

    Returns:
        str: A pergunta de acompanhamento gerada pelo agente.
    """

    instruction_base = """
    Voc√™ √© um tutor virtual experiente, focado em ajudar estudantes a aprenderem ativamente.
    Seu objetivo √© responder √†s perguntas dos estudantes n√£o com respostas diretas,
    mas atrav√©s de perguntas que os incentivem a pensar criticamente e construir seu pr√≥prio conhecimento.

    Ao receber uma pergunta, voc√™ deve:
    1. Identificar os principais conceitos na pergunta do estudante.
    2. Formular uma ou duas perguntas de acompanhamento que ajudem o estudante a refletir
       sobre esses conceitos, a considerar diferentes perspectivas e a conectar ideias.
    3. Manter o contexto da conversa (se fornecido) para evitar repeti√ß√µes e direcionar o aprendizado.
    4. Priorizar perguntas que estimulem a busca por informa√ß√µes e a an√°lise cr√≠tica,
       em vez de simplesmente fornecer respostas.
    5. Seja conciso e claro em suas perguntas.

    Pergunta do estudante: "{pergunta_inicial}"
    """

    # Formatar hist√≥rico para a instru√ß√£o
    historico_str = ""
    if historico_conversa:
        linhas_historico = []
        for item in historico_conversa:
             # Garante que 'role' e 'content' existam e sejam strings antes de formatar
            role = str(item.get('role', 'desconhecido')).capitalize()
            content = str(item.get('content', ''))
            linhas_historico.append(f"{role}: {content}")
        historico_str = "\n".join(linhas_historico)
        instruction = f"{instruction_base}\nHist√≥rico da conversa:\n{historico_str}"
    else:
        instruction = instruction_base


    questionador = Agent(
        name="agente_questionador",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para guiar o aprendizado atrav√©s de perguntas."
    )

    # A entrada para o agente pode ser apenas a pergunta inicial, o hist√≥rico j√° est√° na instru√ß√£o
    # entrada_do_agente = f"Pergunta: {pergunta_inicial}"
    # if historico_conversa:
    #     entrada_do_agente += f"\nHist√≥rico: {historico_conversa}" # Isso duplicaria se j√° estiver na instru√ß√£o

    # Passar apenas a pergunta inicial, confiando que a instru√ß√£o usa o hist√≥rico
    entrada_do_agente = pergunta_inicial


    # A intera√ß√£o com o agente (invocando o modelo Gemini) √© feita atrav√©s de 'call_agent'
    # que voc√™ j√° demonstrou usar.
    # Use await aqui, pois call_agent √© ass√≠ncrono
    pergunta_de_acompanhamento = await call_agent(questionador, entrada_do_agente)
    return pergunta_de_acompanhamento

# %%
####################################################
# --- Agente 3: Buscador e Validador de Fontes --- #
####################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
async def agente_busca_valida_fontes(query, fontes_confiaveis=None):
    """
    Agente respons√°vel por buscar informa√ß√µes relevantes para uma consulta
    e validar a credibilidade das fontes (usando google-adk).
    ...
    """

    instruction = f"""
    Sua fun√ß√£o √© buscar informa√ß√µes relevantes para a seguinte consulta: "{query}".
    Voc√™ DEVE usar a ferramenta ('Google Search') para realizar esta busca.
    Priorize a busca em fontes confi√°veis, se uma lista de fontes confi√°veis for fornecida.

    Ao realizar a busca, siga os seguintes passos:
    1. Utilize a ferramenta ('Google Search') para encontrar informa√ß√µes relevantes sobre "{query}".
    2. Avalie a credibilidade das fontes encontradas. Se uma lista de 'fontes_confiaveis' for fornecida ({fontes_confiaveis if fontes_confiaveis else "Nenhuma lista fornecida"}),
       priorize e destaque as informa√ß√µes provenientes dessas fontes.
    3. Se a ferramenta ('Google Search') fornecer informa√ß√µes sobre as p√°ginas utilizadas (metadados dos resultados), inclua essas informa√ß√µes na sua resposta.
    4. Formate sua resposta de forma clara, indicando as informa√ß√µes encontradas e as fontes de onde elas vieram,
       mencionando se a fonte √© considerada confi√°vel (com base na lista fornecida, se houver).
    5. Se n√£o encontrar informa√ß√µes relevantes em fontes confi√°veis (ou em nenhuma fonte), informe isso de forma clara.

    Consulta: "{query}"
    """
    # A lista de fontes confi√°veis j√° est√° na instru√ß√£o, o modelo deve consider√°-la.

    busca_agente = Agent(
        name="agente_busca_valida_fontes",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para buscar e validar informa√ß√µes em fontes confi√°veis.",
        tools=[google_search_tool_instance]  # <--- USE a inst√¢ncia da ferramenta importada
    )

    # A entrada para o agente n√£o precisa repetir as fontes confi√°veis se j√° est√£o na instru√ß√£o.
    # O modelo usar√° a ferramenta Google Search com a query fornecida.
    entrada_do_agente = f"Por favor, busque informa√ß√µes sobre: {query}"

    # Use await aqui, pois call_agent √© ass√≠ncrono
    resposta_do_agente = await call_agent(busca_agente, entrada_do_agente)
    return resposta_do_agente

# %%
#################################################
# --- Agente 4: Contexto e Mem√≥ria de Sess√£o --- #
#################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
async def agente_contexto(historico_conversa=None):
    """
    Agente respons√°vel por manter e fornecer o contexto da conversa (usando google-adk).
    ...
    """
    historico_str = "Nenhum hist√≥rico dispon√≠vel."
    if historico_conversa:
        # Formatar o hist√≥rico de forma mais leg√≠vel para o modelo
        linhas_historico = []
        for item in historico_conversa:
            # Garante que 'role' e 'content' existam e sejam strings antes de formatar
            role = str(item.get('role', 'desconhecido')).capitalize()
            content = str(item.get('content', ''))
            linhas_historico.append(f"{role}: {content}")
        historico_str = "\n".join(linhas_historico)

    instruction = f"""
    Sua fun√ß√£o √© analisar o seguinte hist√≥rico da conversa e, se necess√°rio, resumi-lo ou
    apresent√°-lo de forma clara para ser usado como contexto por outros agentes.
    O objetivo √© que outros agentes possam entender o fluxo da intera√ß√£o
    e evitar repeti√ß√µes ou informa√ß√µes desconexas.

    Formate o hist√≥rico de forma concisa e cronol√≥gica.
    Inclua o papel do participante ('Usu√°rio' ou 'Agente') e o conte√∫do da mensagem.

    Hist√≥rico da conversa fornecido:
    {historico_str}

    Apresente este hist√≥rico de forma organizada. Se o hist√≥rico for muito longo,
    forne√ßa um resumo conciso dos principais pontos e das √∫ltimas intera√ß√µes.
    """

    # N√£o √© necess√°rio redefinir Agent e call_agent aqui.
    # Elas s√£o importadas globalmente.

    contexto_agente = Agent( # Usa a classe Agent global
        name="agente_contexto",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para gerenciar e fornecer o contexto da conversa."
    )

    # A entrada pode ser simplesmente uma solicita√ß√£o para processar o hist√≥rico j√° na instru√ß√£o.
    # Ou, se preferir, passar o hist√≥rico aqui tamb√©m.
    entrada_do_agente = f"Analisar e formatar o seguinte hist√≥rico: {historico_str}"

    # Use await aqui, pois call_agent √© ass√≠ncrono
    contexto_formatado = await call_agent(contexto_agente, entrada_do_agente) # Usa a call_agent global
    return contexto_formatado

# Exemplo de como usar:
# historico_exemplo_contexto = [
#     {"role": "usu√°rio", "content": "Qual a capital da Fran√ßa?"},
#     {"role": "agente", "content": "A capital da Fran√ßa √© Paris."},
#     {"role": "usu√°rio", "content": "Qual a popula√ß√£o de Paris?"}
# ]
# # Use await para chamar a fun√ß√£o no exemplo, se execut√°-lo
# # contexto_processado = await agente_contexto(historico_exemplo_contexto)
# # print(f"--- Contexto Processado pelo Agente ---\n{contexto_processado}")

# %%
######################################################
# --- Agente 5: Curadoria e Sugest√£o de Conte√∫do --- #
######################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
# CORRE√á√ÉO: Remova 'tool' da lista de par√¢metros se ele estiver aqui
async def agente_curadoria_conteudo(topico, nivel_estudante=None, historico_conversa=None, fontes_confiaveis=None):
    """
    Agente respons√°vel por curar e sugerir conte√∫do educacional relevante
    com base no t√≥pico, n√≠vel do estudante e hist√≥rico da conversa (usando google-adk).

    Args:
        topico (str): O t√≥pico principal de estudo.
        nivel_estudante (str, optional): O n√≠vel de escolaridade do estudante
            (e.g., "fundamental", "m√©dio"). Defaults to None.
        historico_conversa (str, optional): Hist√≥rico formatado da conversa.
            Defaults to None.
        fontes_confiaveis (list, optional): Lista de URLs ou padr√µes de URLs
            considerados fontes confi√°veis. Defaults to None.
        # Removido Google Search_tool, pois a ferramenta √© passada no Agent
        # Verifique se 'tool' N√ÉO est√° listado aqui como um par√¢metro obrigat√≥rio ou opcional.

    Returns:
        str: Uma sugest√£o de conte√∫do educacional relevante para o estudante.
    """

    instruction = f"""
    Sua fun√ß√£o √© curar e sugerir conte√∫do educacional relevante para o t√≥pico: "{topico}".
    Considere o n√≠vel do estudante (se fornecido) e o hist√≥rico da conversa para fazer sugest√µes personalizadas.
    Priorize a sugest√£o de conte√∫do de fontes confi√°veis, se uma lista for fornecida.

    Ao fazer sugest√µes, voc√™ deve:
    1. Utilize a ferramenta google ('Google Search') para encontrar recursos educacionais relevantes para o t√≥pico (artigos, v√≠deos, exerc√≠cios, etc.). Use a consulta: "{topico} material de estudo {nivel_estudante if nivel_estudante else ''}"
    2. Se o n√≠vel do estudante for fornecido ("fundamental" ou "m√©dio"), adapte as sugest√µes para serem apropriadas.
    3. Analisar o hist√≥rico da conversa para identificar lacunas no conhecimento ou √°reas de interesse do estudante
       e sugerir conte√∫do que possa aprofundar o aprendizado ou explorar esses interesses.
    4. Priorizar o conte√∫do de fontes confi√°veis, mencionando a fonte na sua sugest√£o.
    5. Formate sua sugest√£o de forma clara e concisa, incluindo um breve resumo do conte√∫do sugerido e um link (se dispon√≠vel).
    6. Se n√£o encontrar conte√∫do relevante ou adequado, informe isso de forma clara e sugira outras abordagens (e.g., refinar a busca).

    T√≥pico: "{topico}"
    {f"N√≠vel do estudante: {nivel_estudante}" if nivel_estudante else ""}
    {f"Hist√≥rico da conversa: {historico_conversa}" if historico_conversa else ""}
    {f"Fontes confi√°veis a considerar: {fontes_confiaveis}" if fontes_confiaveis else ""}
# %%
######################################################
# --- Agente 5: Curadoria e Sugest√£o de Conte√∫do --- #
######################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
# CORRE√á√ÉO: Remova 'tool' da lista de par√¢metros se ele estiver aqui
# %%
######################################################
# --- Agente 5: Curadoria e Sugest√£o de Conte√∫do --- #
######################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
# CORRE√á√ÉO: Remova 'tool' da lista de par√¢metros se ele estiver aqui
# %%
######################################################
# --- Agente 5: Curadoria e Sugest√£o de Conte√∫do --- #
######################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
# CORRE√á√ÉO: Remova 'tool' da lista de par√¢metros se ele estiver aqui
async def agente_curadoria_conteudo(topico, nivel_estudante=None, historico_conversa=None, fontes_confiaveis=None):
    """
    Agente respons√°vel por curar e sugerir conte√∫do educacional relevante
    com base no t√≥pico, n√≠vel do estudante e hist√≥rico da conversa (usando google-adk).

    Args:
        topico (str): O t√≥pico principal de estudo.
        nivel_estudante (str, optional): O n√≠vel de escolaridade do estudante
            (e.g., "fundamental", "m√©dio"). Defaults to None.
        historico_conversa (str, optional): Hist√≥rico formatado da conversa.
            Defaults to None.
        fontes_confiaveis (list, optional): Lista de URLs ou padr√µes de URLs
            considerados fontes confi√°veis. Defaults to None.
        # Removido Google Search_tool, pois a ferramenta √© passada no Agent
        # Verifique se 'tool' N√ÉO est√° listado aqui como um par√¢metro obrigat√≥rio ou opcional.

    Returns:
        str: Uma sugest√£o de conte√∫do educacional relevante para o estudante.
    """

    instruction = f"""
    Sua fun√ß√£o √© curar e sugerir conte√∫do educacional relevante para o t√≥pico: "{topico}".
    Considere o n√≠vel do estudante (se fornecido) e o hist√≥rico da conversa para fazer sugest√µes personalizadas.
    Priorize a sugest√£o de conte√∫do de fontes confi√°veis, se uma lista for fornecida.

    Ao fazer sugest√µes, voc√™ deve:
    1. Utilize a ferramenta google ('Google Search') para encontrar recursos educacionais relevantes para o t√≥pico (artigos, v√≠deos, exerc√≠cios, etc.). Use a consulta: "{topico} material de estudo {nivel_estudante if nivel_estudante else ''}"
    2. Se o n√≠vel do estudante for fornecido ("fundamental" ou "m√©dio"), adapte as sugest√µes para serem apropriadas.
    3. Analisar o hist√≥rico da conversa para identificar lacunas no conhecimento ou √°reas de interesse do estudante
       e sugerir conte√∫do que possa aprofundar o aprendizado ou explorar esses interesses.
    4. Priorizar o conte√∫do de fontes confi√°veis, mencionando a fonte na sua sugest√£o.
    5. Formate sua sugest√£o de forma clara e concisa, incluindo um breve resumo do conte√∫do sugerido e um link (se dispon√≠vel).
    6. Se n√£o encontrar conte√∫do relevante ou adequado, informe isso de forma clara e sugira outras abordagens (e.g., refinar a busca).

    T√≥pico: "{topico}"
    {f"N√≠vel do estudante: {nivel_estudante}" if nivel_estudante else ""}
    {f"Hist√≥rico da conversa: {historico_conversa}" if historico_conversa else ""}
    {f"Fontes confi√°veis a considerar: {fontes_confiaveis}" if fontes_confiaveis else ""}
    """
    # Passe a ferramenta Google Search_tool_instance para o agente
    tools_list = [Google_Search_tool_instance] # Use a inst√¢ncia importada


    curadoria_agente = Agent(
        name="agente_curadoria_conteudo",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para curar e sugerir conte√∫do educacional relevante.",
        tools=tools_list # <--- USE a vari√°vel tools_list aqui
    )

    # A entrada para o agente √© apenas o t√≥pico e o contexto relevante, n√£o a consulta de pesquisa em si.
    # A instru√ß√£o do agente o guia para formular a consulta de pesquisa usando a ferramenta.
    entrada_do_agente = f"T√≥pico: {topico}"
    if nivel_estudante:
        entrada_do_agente += f"\nN√≠vel do estudante: {nivel_estudante}"
    if historico_conversa:
        entrada_do_agente += f"\nHist√≥rico: {historico_conversa}"
    if fontes_confiaveis:
        entrada_do_agente += f"\nFontes confi√°veis: {fontes_confiaveis}"


    # Use await aqui, pois call_agent √© ass√≠ncrono
    resposta_do_agente = await call_agent(curadoria_agente, entrada_do_agente)
    return resposta_do_agente
    Args:
        topico (str): O t√≥pico principal de estudo.
        nivel_estudante (str, optional): O n√≠vel de escolaridade do estudante
            (e.g., "fundamental", "m√©dio"). Defaults to None.
        historico_conversa (str, optional): Hist√≥rico formatado da conversa.
            Defaults to None.
        fontes_confiaveis (list, optional): Lista de URLs ou padr√µes de URLs
            considerados fontes confi√°veis. Defaults to None.
        # Removido Google Search_tool, pois a ferramenta √© passada no Agent
        # Verifique se 'tool' N√ÉO est√° listado aqui como um par√¢metro obrigat√≥rio ou opcional.

    Returns:
        str: Uma sugest√£o de conte√∫do educacional relevante para o estudante.
    """

    instruction = f"""
    Sua fun√ß√£o √© curar e sugerir conte√∫do educacional relevante para o t√≥pico: "{topico}".
    Considere o n√≠vel do estudante (se fornecido) e o hist√≥rico da conversa para fazer sugest√µes personalizadas.
    Priorize a sugest√£o de conte√∫do de fontes confi√°veis, se uma lista for fornecida.

    Ao fazer sugest√µes, voc√™ deve:
    1. Utilize a ferramenta google ('Google Search') para encontrar recursos educacionais relevantes para o t√≥pico (artigos, v√≠deos, exerc√≠cios, etc.). Use a consulta: "{topico} material de estudo {nivel_estudante if nivel_estudante else ''}"
    2. Se o n√≠vel do estudante for fornecido ("fundamental" ou "m√©dio"), adapte as sugest√µes para serem apropriadas.
    3. Analisar o hist√≥rico da conversa para identificar lacunas no conhecimento ou √°reas de interesse do estudante
       e sugerir conte√∫do que possa aprofundar o aprendizado ou explorar esses interesses.
    4. Priorizar o conte√∫do de fontes confi√°veis, mencionando a fonte na sua sugest√£o.
    5. Formate sua sugest√£o de forma clara e concisa, incluindo um breve resumo do conte√∫do sugerido e um link (se dispon√≠vel).
    6. Se n√£o encontrar conte√∫do relevante ou adequado, informe isso de forma clara e sugira outras abordagens (e.g., refinar a busca).

    T√≥pico: "{topico}"
    {f"N√≠vel do estudante: {nivel_estudante}" if nivel_estudante else ""}
    {f"Hist√≥rico da conversa: {historico_conversa}" if historico_conversa else ""}
    {f"Fontes confi√°veis a considerar: {fontes_confiaveis}" if fontes_confiaveis else ""}
    """
    # Passe a ferramenta Google Search_tool_instance para o agente
    tools_list = [Google_Search_tool_instance] # Use a inst√¢ncia importada


    curadoria_agente = Agent(
        name="agente_curadoria_conteudo",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para curar e sugerir conte√∫do educacional relevante.",
        tools=tools_list # <--- USE a vari√°vel tools_list aqui
    )

    # A entrada para o agente √© apenas o t√≥pico e o contexto relevante, n√£o a consulta de pesquisa em si.
    # A instru√ß√£o do agente o guia para formular a consulta de pesquisa usando a ferramenta.
    entrada_do_agente = f"T√≥pico: {topico}"
    if nivel_estudante:
        entrada_do_agente += f"\nN√≠vel do estudante: {nivel_estudante}"
    if historico_conversa:
        entrada_do_agente += f"\nHist√≥rico: {historico_conversa}"
    if fontes_confiaveis:
        entrada_do_agente += f"\nFontes confi√°veis: {fontes_confiaveis}"


    # Use await aqui, pois call_agent √© ass√≠ncrono
    resposta_do_agente = await call_agent(curadoria_agente, entrada_do_agente)
    return resposta_do_agente
    Args:
        topico (str): O t√≥pico principal de estudo.
        nivel_estudante (str, optional): O n√≠vel de escolaridade do estudante
            (e.g., "fundamental", "m√©dio"). Defaults to None.
        historico_conversa (str, optional): Hist√≥rico formatado da conversa.
            Defaults to None.
        fontes_confiaveis (list, optional): Lista de URLs ou padr√µes de URLs
            considerados fontes confi√°veis. Defaults to None.
        # Removido Google Search_tool, pois a ferramenta √© passada no Agent
        # Verifique se 'tool' N√ÉO est√° listado aqui como um par√¢metro obrigat√≥rio ou opcional.

    Returns:
        str: Uma sugest√£o de conte√∫do educacional relevante para o estudante.
    """

    instruction = f"""
    Sua fun√ß√£o √© curar e sugerir conte√∫do educacional relevante para o t√≥pico: "{topico}".
    Considere o n√≠vel do estudante (se fornecido) e o hist√≥rico da conversa para fazer sugest√µes personalizadas.
    Priorize a sugest√£o de conte√∫do de fontes confi√°veis, se uma lista for fornecida.

    Ao fazer sugest√µes, voc√™ deve:
    1. Utilize a ferramenta google ('Google Search') para encontrar recursos educacionais relevantes para o t√≥pico (artigos, v√≠deos, exerc√≠cios, etc.). Use a consulta: "{topico} material de estudo {nivel_estudante if nivel_estudante else ''}"
    2. Se o n√≠vel do estudante for fornecido ("fundamental" ou "m√©dio"), adapte as sugest√µes para serem apropriadas.
    3. Analisar o hist√≥rico da conversa para identificar lacunas no conhecimento ou √°reas de interesse do estudante
       e sugerir conte√∫do que possa aprofundar o aprendizado ou explorar esses interesses.
    4. Priorizar o conte√∫do de fontes confi√°veis, mencionando a fonte na sua sugest√£o.
    5. Formate sua sugest√£o de forma clara e concisa, incluindo um breve resumo do conte√∫do sugerido e um link (se dispon√≠vel).
    6. Se n√£o encontrar conte√∫do relevante ou adequado, informe isso de forma clara e sugira outras abordagens (e.g., refinar a busca).

    T√≥pico: "{topico}"
    {f"N√≠vel do estudante: {nivel_estudante}" if nivel_estudante else ""}
# %%
######################################################
# --- Agente 5: Curadoria e Sugest√£o de Conte√∫do --- #
######################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
# CORRE√á√ÉO: Remova 'tool' da lista de par√¢metros se ele estiver aqui
async def agente_curadoria_conteudo(topico, nivel_estudante=None, historico_conversa=None, fontes_confiaveis=None):
    """
    Agente respons√°vel por curar e sugerir conte√∫do educacional relevante
    com base no t√≥pico, n√≠vel do estudante e hist√≥rico da conversa (usando google-adk).

    Args:
        topico (str): O t√≥pico principal de estudo.
        nivel_estudante (str, optional): O n√≠vel de escolaridade do estudante
            (e.g., "fundamental", "m√©dio"). Defaults to None.
        historico_conversa (str, optional): Hist√≥rico formatado da conversa.
            Defaults to None.
        fontes_confiaveis (list, optional): Lista de URLs ou padr√µes de URLs
            considerados fontes confi√°veis. Defaults to None.
        # Removido Google Search_tool, pois a ferramenta √© passada no Agent
        # Verifique se 'tool' N√ÉO est√° listado aqui como um par√¢metro obrigat√≥rio ou opcional.

    Returns:
        str: Uma sugest√£o de conte√∫do educacional relevante para o estudante.
    """

    instruction = f"""
    Sua fun√ß√£o √© curar e sugerir conte√∫do educacional relevante para o t√≥pico: "{topico}".
    Considere o n√≠vel do estudante (se fornecido) e o hist√≥rico da conversa para fazer sugest√µes personalizadas.
    Priorize a sugest√£o de conte√∫do de fontes confi√°veis, se uma lista for fornecida.

    Ao fazer sugest√µes, voc√™ deve:
    1. Utilize a ferramenta google ('Google Search') para encontrar recursos educacionais relevantes para o t√≥pico (artigos, v√≠deos, exerc√≠cios, etc.). Use a consulta: "{topico} material de estudo {nivel_estudante if nivel_estudante else ''}"
    2. Se o n√≠vel do estudante for fornecido ("fundamental" ou "m√©dio"), adapte as sugest√µes para serem apropriadas.
    3. Analisar o hist√≥rico da conversa para identificar lacunas no conhecimento ou √°reas de interesse do estudante
       e sugerir conte√∫do que possa aprofundar o aprendizado ou explorar esses interesses.
    4. Priorizar o conte√∫do de fontes confi√°veis, mencionando a fonte na sua sugest√£o.
    5. Formate sua sugest√£o de forma clara e concisa, incluindo um breve resumo do conte√∫do sugerido e um link (se dispon√≠vel).
    6. Se n√£o encontrar conte√∫do relevante ou adequado, informe isso de forma clara e sugira outras abordagens (e.g., refinar a busca).

    T√≥pico: "{topico}"
    {f"N√≠vel do estudante: {nivel_estudante}" if nivel_estudante else ""}
# %%
######################################################
# --- Agente 5: Curadoria e Sugest√£o de Conte√∫do --- #
######################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
# CORRE√á√ÉO: Remova 'tool' da lista de par√¢metros se ele estiver aqui
async def agente_curadoria_conteudo(topico, nivel_estudante=None, historico_conversa=None, fontes_confiaveis=None):
    """
    Agente respons√°vel por curar e sugerir conte√∫do educacional relevante
    com base no t√≥pico, n√≠vel do estudante e hist√≥rico da conversa (usando google-adk).

    Args:
        topico (str): O t√≥pico principal de estudo.
        nivel_estudante (str, optional): O n√≠vel de escolaridade do estudante
            (e.g., "fundamental", "m√©dio"). Defaults to None.
        historico_conversa (str, optional): Hist√≥rico formatado da conversa.
            Defaults to None.
        fontes_confiaveis (list, optional): Lista de URLs ou padr√µes de URLs
            considerados fontes confi√°veis. Defaults to None.
        # Removido Google Search_tool, pois a ferramenta √© passada no Agent
        # Verifique se 'tool' N√ÉO est√° listado aqui como um par√¢metro obrigat√≥rio ou opcional.

    Returns:
        str: Uma sugest√£o de conte√∫do educacional relevante para o estudante.

    instruction = f"""
    Sua fun√ß√£o √© curar e sugerir conte√∫do educacional relevante para o t√≥pico: "{topico}".
    Considere o n√≠vel do estudante (se fornecido) e o hist√≥rico da conversa para fazer sugest√µes personalizadas.
    Priorize a sugest√£o de conte√∫do de fontes confi√°veis, se uma lista for fornecida.

    Ao fazer sugest√µes, voc√™ deve:
    1. Utilize a ferramenta google ('Google Search') para encontrar recursos educacionais relevantes para o t√≥pico (artigos, v√≠deos, exerc√≠cios, etc.). Use a consulta: "{topico} material de estudo {nivel_estudante if nivel_estudante else ''}"
    2. Se o n√≠vel do estudante for fornecido ("fundamental" ou "m√©dio"), adapte as sugest√µes para serem apropriadas.
    3. Analisar o hist√≥rico da conversa para identificar lacunas no conhecimento ou √°reas de interesse do estudante
       e sugerir conte√∫do que possa aprofundar o aprendizado ou explorar esses interesses.
    4. Priorizar o conte√∫do de fontes confi√°veis, mencionando a fonte na sua sugest√£o.
    5. Formate sua sugest√£o de forma clara e concisa, incluindo um breve resumo do conte√∫do sugerido e um link (se dispon√≠vel).
    6. Se n√£o encontrar conte√∫do relevante ou adequado, informe isso de forma clara e sugira outras abordagens (e.g., refinar a busca).

    T√≥pico: "{topico}"
    {f"N√≠vel do estudante: {nivel_estudante}" if nivel_estudante else ""}
    {f"Hist√≥rico da conversa: {historico_conversa}" if historico_conversa else ""}
    {f"Fontes confi√°veis a considerar: {fontes_confiaveis}" if fontes_confiaveis else ""}
    """
    # Passe a ferramenta Google Search_tool_instance para o agente
    tools_list = [Google_Search_tool_instance] # Use a inst√¢ncia importada


    curadoria_agente = Agent(
        name="agente_curadoria_conteudo",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para curar e sugerir conte√∫do educacional relevante.",
        tools=tools_list # <--- USE a vari√°vel tools_list aqui
    )

    # A entrada para o agente √© apenas o t√≥pico e o contexto relevante, n√£o a consulta de pesquisa em si.
    # A instru√ß√£o do agente o guia para formular a consulta de pesquisa usando a ferramenta.
    entrada_do_agente = f"T√≥pico: {topico}"
    if nivel_estudante:
        entrada_do_agente += f"\nN√≠vel do estudante: {nivel_estudante}"
    if historico_conversa:
        entrada_do_agente += f"\nHist√≥rico: {historico_conversa}"
    if fontes_confiaveis:
        entrada_do_agente += f"\nFontes confi√°veis: {fontes_confiaveis}"


    # Use await aqui, pois call_agent √© ass√≠ncrono
    resposta_do_agente = await call_agent(curadoria_agente, entrada_do_agente)
    return resposta_do_agente


    curadoria_agente = Agent(
        name="agente_curadoria_conteudo",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para curar e sugerir conte√∫do educacional relevante.",
        tools=tools_list # <--- USE a vari√°vel tools_list aqui
    )

    # A entrada para o agente √© apenas o t√≥pico e o contexto relevante, n√£o a consulta de pesquisa em si.
    # A instru√ß√£o do agente o guia para formular a consulta de pesquisa usando a ferramenta.
    entrada_do_agente = f"T√≥pico: {topico}"
    if nivel_estudante:
        entrada_do_agente += f"\nN√≠vel do estudante: {nivel_estudante}"
    if historico_conversa:
        entrada_do_agente += f"\nHist√≥rico: {historico_conversa}"
    if fontes_confiaveis:
        entrada_do_agente += f"\nFontes confi√°veis: {fontes_confiaveis}"


    # Use await aqui, pois call_agent √© ass√≠ncrono
    resposta_do_agente = await call_agent(curadoria_agente, entrada_do_agente)
    return resposta_do_agente


    curadoria_agente = Agent(
        name="agente_curadoria_conteudo",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para curar e sugerir conte√∫do educacional relevante.",
        tools=tools_list # <--- USE a vari√°vel tools_list aqui
    )

    # A entrada para o agente √© apenas o t√≥pico e o contexto relevante, n√£o a consulta de pesquisa em si.
    # A instru√ß√£o do agente o guia para formular a consulta de pesquisa usando a ferramenta.
    entrada_do_agente = f"T√≥pico: {topico}"
    if nivel_estudante:
        entrada_do_agente += f"\nN√≠vel do estudante: {nivel_estudante}"
    if historico_conversa:
        entrada_do_agente += f"\nHist√≥rico: {historico_conversa}"
    if fontes_confiaveis:
        entrada_do_agente += f"\nFontes confi√°veis: {fontes_confiaveis}"


    # Use await aqui, pois call_agent √© ass√≠ncrono
    resposta_do_agente = await call_agent(curadoria_agente, entrada_do_agente)
    return resposta_do_agente
    curadoria_agente = Agent(
        name="agente_curadoria_conteudo",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para curar e sugerir conte√∫do educacional relevante.",
        tools=tools_list # <--- USE a vari√°vel tools_list aqui
    )

    # A entrada para o agente √© apenas o t√≥pico e o contexto relevante, n√£o a consulta de pesquisa em si.
    # A instru√ß√£o do agente o guia para formular a consulta de pesquisa usando a ferramenta.
    entrada_do_agente = f"T√≥pico: {topico}"
    if nivel_estudante:
        entrada_do_agente += f"\nN√≠vel do estudante: {nivel_estudante}"
    if historico_conversa:
        entrada_do_agente += f"\nHist√≥rico: {historico_conversa}"
    if fontes_confiaveis:
        entrada_do_agente += f"\nFontes confi√°veis: {fontes_confiaveis}"


    # Use await aqui, pois call_agent √© ass√≠ncrono
    resposta_do_agente = await call_agent(curadoria_agente, entrada_do_agente)
    return resposta_do_agente

# %%
########################################################
# --- Agente 6: Apresenta√ß√£o e Formata√ß√£o de Texto --- #
########################################################

# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
async def agente_apresentacao(conteudo, formato="markdown", **kwargs):
    """
    Agente respons√°vel por formatar e apresentar o conte√∫do para o usu√°rio (usando google-adk).

    Args:
        conteudo (str): O texto ou conte√∫do a ser apresentado.
        formato (str, optional): O formato de apresenta√ß√£o ('markdown' ou 'html').
            Defaults to "markdown".
        **kwargs: Argumentos adicionais que podem ser usados para formata√ß√£o
            espec√≠fica (e.g., cores, estilos).
    """

    instruction = f"""
    Sua fun√ß√£o √© formatar e apresentar o seguinte conte√∫do para o usu√°rio
    de forma clara, organizada e visualmente agrad√°vel.

    Conte√∫do a ser apresentado:
    "{conteudo}"

    Formato de apresenta√ß√£o solicitado: "{formato}"

    Instru√ß√µes de formata√ß√£o adicionais (se fornecidas):
    "{kwargs if kwargs else 'Nenhuma instru√ß√£o adicional.'}"

    Dependendo do formato solicitado, utilize as ferramentas e t√©cnicas apropriadas
    para melhorar a legibilidade e o impacto do conte√∫do.

    Para 'markdown': utilize a sintaxe Markdown para negrito, it√°lico, listas, cabe√ßalhos, etc.
    Para 'html': utilize tags HTML para estruturar e estilizar o conte√∫do (cores, divs, spans, etc.).
    Considere a largura da tela para evitar quebras de linha inadequadas (use 'textwrap' se necess√°rio).
    Se houver informa√ß√µes importantes (como fontes confi√°veis), destaque-as.
    """

    apresentacao_agente = Agent(
        name="agente_apresentacao",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para formatar e apresentar conte√∫do ao usu√°rio."
    )

    # A entrada para o agente √© apenas o conte√∫do, formato e argumentos adicionais.
    entrada_do_agente = f"Conte√∫do: {conteudo}\nFormato: {formato}\nArgumentos: {kwargs}"

    # A sa√≠da deste agente ser√° o pr√≥prio conte√∫do formatado (espera-se).
    # Use await aqui, pois call_agent √© ass√≠ncrono
    conteudo_formatado = await call_agent(apresentacao_agente, entrada_do_agente)


    # Para garantir a formata√ß√£o visual no notebook, usamos IPython.display aqui.
    # O agente formatou o *texto*, agora exibimos o texto formatado.
    if formato.lower() == "markdown":
        display(Markdown(conteudo_formatado))
    elif formato.lower() == "html":
        display(HTML(conteudo_formatado))
    else:
        print(conteudo_formatado) # Exibe como texto plano se o formato n√£o for reconhecido

    # Retornamos o conte√∫do formatado para poss√≠vel uso em outros lugares
    return conteudo_formatado

# %%
##########################################
# --- Agente 7: Feedback e Adapta√ß√£o --- #
##########################################
# Tornar esta fun√ß√£o ass√≠ncrona, pois ela chama await call_agent
async def agente_feedback_adaptacao(ultima_pergunta, resposta_estudante, historico_conversa=None):
    """
    Agente respons√°vel por analisar a resposta do estudante e o hist√≥rico da conversa
    para fornecer feedback e adaptar a estrat√©gia de aprendizado (usando google-adk).

    Args:
        ultima_pergunta (str): A √∫ltima pergunta feita ao estudante.
        resposta_estudante (str): A resposta fornecida pelo estudante.
        historico_conversa (str, optional): Hist√≥rico formatado da conversa.
            Defaults to None.

    Returns:
        str: Uma mensagem de feedback para o estudante e/ou uma sugest√£o de adapta√ß√£o
             para o agente de questionamento.
    """

    instruction = f"""
    Sua fun√ß√£o √© analisar a resposta do estudante √† √∫ltima pergunta e o hist√≥rico da conversa
    para fornecer feedback construtivo e sugerir adapta√ß√µes na estrat√©gia de aprendizado.

    √öltima pergunta: "{ultima_pergunta}"
    Resposta do estudante: "{resposta_estudante}"

    Hist√≥rico da conversa:
    "{historico_conversa if historico_conversa else 'Nenhum hist√≥rico dispon√≠vel.'}"

    Ao analisar a resposta, voc√™ deve considerar:
    - A corre√ß√£o da resposta (se poss√≠vel determinar com base no seu conhecimento).
    - O n√≠vel de compreens√£o demonstrado pelo estudante.
    - Quaisquer lacunas no conhecimento ou √°reas de confus√£o aparentes.
    - O engajamento e o n√≠vel de participa√ß√£o do estudante.

    Com base na sua an√°lise, voc√™ deve:
    1. Fornecer feedback claro e encorajador ao estudante, destacando os pontos positivos
       e oferecendo sugest√µes para melhoria, se necess√°rio.
    2. Sugerir adapta√ß√µes para o agente de questionamento, como:
       - Simplificar as pr√≥ximas perguntas se o estudante estiver com dificuldades.
       - Oferecer mais exemplos ou analogias.
       - Aprofundar a discuss√£o se o estudante demonstrar boa compreens√£o.
       - Mudar o t√≥pico se o estudante parecer desinteressado ou frustrado.
    3. Seja espec√≠fico em suas sugest√µes de adapta√ß√£o, indicando claramente o que o
       agente de questionamento deve fazer.

    Sua sa√≠da deve ser uma mensagem para o estudante (feedback) e/ou uma mensagem
    direcionada ao agente de questionamento (sugest√£o de adapta√ß√£o), separadas claramente.
    """

    feedback_adaptacao_agente = Agent(
        name="agente_feedback_adaptacao",
        model=MODEL_ID, # Usar a vari√°vel global MODEL_ID
        instruction=instruction,
        description="Agente para fornecer feedback e adaptar a estrat√©gia de aprendizado."
    )

    entrada_do_agente = f"√öltima pergunta: {ultima_pergunta}\nResposta: {resposta_estudante}\nHist√≥rico: {historico_conversa if historico_conversa else 'Nenhum hist√≥rico.'}"

    # A sa√≠da deste agente ser√° o feedback para o estudante e/ou a sugest√£o para o questionador (espera-se).
    # Use await aqui, pois call_agent √© ass√≠ncrono
    retorno_do_agente = await call_agent(feedback_adaptacao_agente, entrada_do_agente)
    return retorno_do_agente

# %%
####################################################
# --- Agente 8: Anexador de Fontes Interativas --- #
####################################################

# Esta fun√ß√£o n√£o precisa ser ass√≠ncrona, pois n√£o usa await
def agente_anexador_fontes_parser_direto(comando_usuario, lista_fontes_atual=None):
    if lista_fontes_atual is None:
        lista_fontes_atual = []

    mensagem = ""
    comando_lower = comando_usuario.lower().strip()

    if comando_lower.startswith("/adicionar_fonte "):
        try:
            # Usar split(maxsplit=1) para garantir que apenas o primeiro espa√ßo seja usado como separador
            partes = comando_usuario.split(" ", maxsplit=1)
            if len(partes) < 2:
                 raise IndexError # For√ßa o erro de comando inv√°lido se n√£o houver URL

            fonte = partes[1].strip()

            if not fonte: # Verifica se a URL n√£o est√° vazia
                raise ValueError("URL da fonte n√£o pode ser vazia.")

            # Valida√ß√£o de URL mais robusta pode ser considerada
            # Regex para validar URLs http/https
            url_regex = re.compile(
                r'^(?:http|https)://' # Protocolo (http ou https)
                r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' # Dom√≠nio
                r'localhost|' # ou localhost
                r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ou endere√ßo IP
                r'(?::\d+)?' # Porta opcional
                r'(?:/?|[/?]\S+)$', re.IGNORECASE) # Caminho e query string

            # Se a URL n√£o come√ßar com http ou https, tentar adicionar https:// para validar
            fonte_a_validar = fonte
            if not fonte_a_validar.startswith("http://") and not fonte_a_validar.startswith("https://"):
                 fonte_a_validar = "https://" + fonte_a_validar

            # Verificar se a URL (com ou sem https adicionado para teste) corresponde √† regex
            if url_regex.match(fonte_a_validar):
                 # Se a URL original n√£o tinha protocolo, armazenar com https://
                 if not fonte.startswith("http://") and not fonte.startswith("https://"):
                     fonte_final = "https://" + fonte
                 else:
                     fonte_final = fonte # Usar a URL original se j√° tinha protocolo

                 if fonte_final not in lista_fontes_atual:
                     lista_fontes_atual.append(fonte_final)
                     mensagem = f"‚úÖ Fonte '{fonte_final}' adicionada √† lista."
                 else:
                     mensagem = f"‚ÑπÔ∏è A fonte '{fonte_final}' j√° est√° na lista."
            else:
                # Se a valida√ß√£o falhou mesmo com https adicionado para teste
                mensagem = f"‚ùå URL inv√°lida: '{fonte}'. Use o formato correto (e.g., https://www.exemplo.com)."
        except IndexError: # Caso n√£o haja nada ap√≥s "/adicionar_fonte "
            mensagem = "‚ùå Comando inv√°lido. Use: /adicionar_fonte <URL>"
        except ValueError as e:
            mensagem = f"‚ùå Erro: {e}"
        except Exception as e: # Capturar outros erros inesperados durante o processamento
            mensagem = f"‚ùå Ocorreu um erro inesperado: {e}"


    elif comando_lower.startswith("/remover_fonte "):
        try:
             # Usar split(maxsplit=1) para garantir que apenas o primeiro espa√ßo seja usado como separador
            partes = comando_usuario.split(" ", maxsplit=1)
            if len(partes) < 2:
                 raise IndexError # For√ßa o erro de comando inv√°lido se n√£o houver URL

            fonte = partes[1].strip()

            if not fonte:
                 raise ValueError("URL da fonte n√£o pode ser vazia.")

            # Adicionar "https://" se ausente, para consist√™ncia com a adi√ß√£o e remo√ß√£o
            if not fonte.startswith("http://") and not fonte.startswith("https://"):
                fonte_com_protocolo = "https://" + fonte
                fonte_sem_protocolo = fonte # Guardar original para mensagem de erro
            else:
                fonte_com_protocolo = fonte
                fonte_sem_protocolo = fonte

            removido = False
            # Tenta remover a vers√£o com protocolo primeiro
            if fonte_com_protocolo in lista_fontes_atual:
                lista_fontes_atual.remove(fonte_com_protocolo)
                mensagem = f"üóëÔ∏è Fonte '{fonte_com_protocolo}' removida da lista."
                removido = True
            # Se n√£o encontrou com protocolo, tenta remover a vers√£o sem protocolo
            elif fonte_sem_protocolo in lista_fontes_atual:
                 lista_fontes_atual.remove(fonte_sem_protocolo)
                 mensagem = f"üóëÔ∏è Fonte '{fonte_sem_protocolo}' removida da lista."
                 removido = True

            if not removido:
                mensagem = f"‚ö†Ô∏è A fonte '{fonte}' n√£o est√° na lista."

        except IndexError:
            mensagem = "‚ùå Comando inv√°lido. Use: /remover_fonte <URL>"
        except ValueError as e:
             mensagem = f"‚ùå Erro: {e}"
        except Exception as e: # Capturar outros erros inesperados durante o processamento
             mensagem = f"‚ùå Ocorreu um erro inesperado: {e}"


    elif comando_lower == "/listar_fontes":
        if lista_fontes_atual:
            # Ordenar a lista para uma apresenta√ß√£o consistente
            fontes_ordenadas = sorted(lista_fontes_atual)
            mensagem = "üìã Lista de fontes atuais:\n" + "\n".join(f"- {f}" for f in fontes_ordenadas)
        else:
            mensagem = "üìö A lista de fontes est√° vazia."
    else:
        mensagem = (f"‚ùì Comando inv√°lido: '{comando_usuario}'. Use '/adicionar_fonte <URL>', "
                    "'/listar_fontes' ou '/remover_fonte <URL>'.")

    # Esta fun√ß√£o n√£o √© ass√≠ncrona, ent√£o retorna os valores diretamente.
    return mensagem, lista_fontes_atual # Corrigido: Retorna lista_fontes_atual, n√£o lista_fontes

# %%
# FLUXO DOS AGENTES

# Importa√ß√µes necess√°rias (j√° devem estar na c√©lula de imports principal ou em c√©lulas separadas)
from IPython.display import Markdown, display
# Garanta que esta importa√ß√£o esteja funcionando no seu ambiente
from google.generativeai import GenerativeModel # Use a classe diretamente
from google.adk.agents import Agent # Para os outros agentes
import asyncio # Importe asyncio
# Importe a inst√¢ncia da ferramenta Google Search se ainda n√£o estiver importada
# from google.adk.tools.search import google_search as google_search_tool_instance # Exemplo de import
# Defini√ß√£o das fun√ß√µes dos agentes (simplificadas para o exemplo, assumindo que retornam strings)
# IMPORTANTE: Na implementa√ß√£o real, estas fun√ß√µes provavelmente usariam call_agent ou
# interagiriam com modelos de forma ass√≠ncrona, tornando-as 'awaitable'.
# Estou adicionando 'async' e 'await' onde parece que intera√ß√µes com agentes
# externos ou modelos ass√≠ncronos ocorreriam, baseado no contexto do erro.

async def agente_boas_vindas():
    # Simula uma resposta inicial
    return "Ol√°! Sou seu Chatbot Educacional. Como posso te ajudar hoje?"

def agente_anexador_fontes_parser_direto(comando, lista_fontes):
    # Simula processamento de comando de fontes
    if "/adicionar_fonte" in comando:
        fonte = comando.replace("/adicionar_fonte", "").strip()
        if fonte and fonte not in lista_fontes:
            lista_fontes.append(fonte)
            return f"Fonte '{fonte}' adicionada com sucesso.", lista_fontes
        elif fonte:
            return f"Fonte '{fonte}' j√° est√° na lista.", lista_fontes
        else:
            return "Comando /adicionar_fonte requer uma URL ou padr√£o.", lista_fontes
    elif "/remover_fonte" in comando:
        fonte = comando.replace("/remover_fonte", "").strip()
        if fonte and fonte in lista_fontes:
            lista_fontes.remove(fonte)
            return f"Fonte '{fonte}' removida com sucesso.", lista_fontes
        elif fonte:
            return f"Fonte '{fonte}' n√£o encontrada na lista.", lista_fontes
        else:
            return "Comando /remover_fonte requer uma URL ou padr√£o.", lista_fontes
    elif "/listar_fontes" in comando:
        if lista_fontes:
            return "Fontes confi√°veis configuradas:\n" + "\n".join(lista_fontes), lista_fontes
        else:
            return "Nenhuma fonte confi√°vel configurada.", lista_fontes
    else:
        return "Comando de fonte desconhecido.", lista_fontes

async def agente_apresentacao(mensagem, formato="markdown"):
    # Simula a apresenta√ß√£o da mensagem
    if formato == "markdown":
        display(Markdown(mensagem))
    else:
        print(mensagem)

async def agente_contexto(historico_conversa):
    # Simula a gera√ß√£o de contexto baseado no hist√≥rico
    contexto = "Hist√≥rico:\n"
    for item in historico_conversa:
        contexto += f"{item['role'].capitalize()}: {item['content']}\n"
    return contexto

async def agente_curadoria_conteudo(topico, nivel_estudante, historico_conversa, fontes_confiaveis, tool):
    # Simula a busca e curadoria de conte√∫do.
    # Na realidade, usaria a 'tool' (GoogleSearch) e processaria os resultados.
    return f"Conte√∫do sobre '{topico}' para n√≠vel '{nivel_estudante}', considerando o hist√≥rico e fontes confi√°veis."

async def agente_questionador(pergunta_usuario, contexto_conversa):
    # Simula a gera√ß√£o de uma pergunta guia
    return f"Para entender melhor, voc√™ poderia me falar mais sobre como '{pergunta_usuario}' se relaciona com...?"

async def agente_feedback_adaptacao(pergunta_agente, resposta_estudante, contexto_conversa):
    # Simula a gera√ß√£o de feedback e adapta√ß√£o
    return "√ìtima resposta! Isso me ajuda a entender melhor. O que voc√™ pensa sobre...?"

# Defini√ß√£o da classe GoogleSearch (apenas um placeholder para o exemplo)
class GoogleSearch:
    def __call__(self, query):
        print(f"Simulando busca no Google por: {query}")
        # Na implementa√ß√£o real, faria a chamada √† API de busca
        return f"Resultados da busca por '{query}'..."


async def main(): # Fun√ß√£o principal ass√≠ncrona
    # Inicializa√ß√£o da lista de fontes confi√°veis
    lista_fontes_confiaveis = [
        "https://scholar.google.com.br/",
        "https://www.scielo.br/",
        "https://oasisbr.ibict.br/",
        "https://bdtd.ibict.br/",
        "https://educapes.capes.gov.br/",
        "https://www.dominiopublico.gov.br/",
        "https://anais.abc.org.br/",
        "https://sbfisica.org.br/rbef/",
        "https://www.sbm.org.br/boletim/",
        "https://www.scielo.br/boletim/",
        "https://www.scielo.br/rsp/",
        "https://www.scielo.br/csp/",
        "https://www.scielo.br/mioc/",
        "https://www.scielo.br/rbcsoc/",
        "https://www.scielo.br/rbcsoc/",
        "https://www.scielo.br/ccampo/",
        "https://www.scielo.br/nec/",
        "https://rae.fgv.br/",
        "https://www.scielo.br/opiniaop/",
        "https://www.scielo.br/dados/",
        "*.br",
        "*.edu.br",
        "*.gov.br",
        "*.org.br",
        "*.usp.br",
        "*.unicamp.br",
        "*.ufrj.br",
        "*.ufmg.br",
        "*.unesp.br",
        "*.ufrgs.br",
        "*.ita.br",
        "https://periodicos.capes.gov.br/",
        "https://lume.ufrgs.br/",
        "https://catalogodeteses.capes.gov.br/"
    ]

    # Inicializa√ß√£o do hist√≥rico da conversa
    historico = []

    # Agente de Boas-Vindas (usando a fun√ß√£o definida)
    print("Iniciando o Chatbot Educacional...")
    # Use await aqui, pois a fun√ß√£o agente_boas_vindas foi tornada awaitable
    mensagem_inicial = await agente_boas_vindas()
    display(Markdown(mensagem_inicial))


    while True:
        pergunta_usuario = input("Digite sua pergunta ou comando aqui: ")
        if pergunta_usuario.lower() in ["sair", "fim", "adeus"]:
            print("Chatbot: At√© a pr√≥xima!")
            break

        # 1. Agente de Anexador de Fontes Interativas (tratamento de comandos)
        if pergunta_usuario.lower().startswith(("/adicionar_fonte", "/remover_fonte", "/listar_fontes")):
            mensagem_fonte, lista_fontes_confiaveis = agente_anexador_fontes_parser_direto(pergunta_usuario, lista_fontes_confiaveis)
            await agente_apresentacao(f"Gerenciamento de Fontes:\n{mensagem_fonte}", formato="markdown")
            historico.append({"role": "sistema", "content": f"Comando de fontes: {pergunta_usuario}. Resultado: {mensagem_fonte}"})

        else:
            # --- Fluxo normal do chatbot para perguntas ---
            historico.append({"role": "usu√°rio", "content": pergunta_usuario})


            # 2. Agente de Contexto e Mem√≥ria
            contexto_atual_formatado = await agente_contexto(historico)


            # 3. Decidir o fluxo: Questionamento Guiado ou Pesquisa Direta/Curadoria
            palavras_chave_pesquisa = ["o que √©", "explique", "quem foi", "como funciona", "pesquise sobre", "me fale sobre", "defina"]
            precisa_de_pesquisa_direta = any(keyword in pergunta_usuario.lower() for keyword in palavras_chave_pesquisa)

            if precisa_de_pesquisa_direta:
                display(Markdown("üîç Consultando meus conhecimentos e buscando informa√ß√µes para voc√™..."))
                sugestao_conteudo = await agente_curadoria_conteudo(
                    topico=pergunta_usuario,
                    nivel_estudante="ensino fundamental ou m√©dio",
                    historico_conversa=contexto_atual_formatado,
                    fontes_confiaveis=lista_fontes_confiaveis
                )
                await agente_apresentacao(f"Aqui est√£o algumas informa√ß√µes e recursos que encontrei:\n{sugestao_conteudo}", formato="markdown")
                historico.append({"role": "agente", "content": sugestao_conteudo})

            else:
                # 4b. Agente de Questionamento Guiado
                # agente_questionador agora precisa ser awaitable
                pergunta_do_agente_guiado = await agente_questionador(pergunta_usuario, contexto_atual_formatado)
                ultima_pergunta_agente = pergunta_do_agente_guiado # Salva para o feedback
                # agente_apresentacao agora precisa ser awaitable
                await agente_apresentacao(f"Agente Guia: {pergunta_do_agente_guiado}", formato="markdown")
                historico.append({"role": "agente", "content": pergunta_do_agente_guiado})

                # 5. Estudante responde √† pergunta do agente guia (input √© s√≠ncrono, pode ficar aqui)
                resposta_estudante = input("Sua resposta/reflex√£o: ")
                historico.append({"role": "usu√°rio", "content": resposta_estudante})

                # 6. Agente de Feedback e Adapta√ß√£o (ap√≥s resposta ao agente guia)
                contexto_para_feedback = await agente_contexto(historico)
                feedback_e_adaptacao = await agente_feedback_adaptacao(ultima_pergunta_agente, resposta_estudante, contexto_para_feedback)
                await agente_apresentacao(f"Feedback do Guia:\n{feedback_e_adaptacao}", formato="markdown")

        print("\n") # Espa√ßo entre as intera√ß√µes

# Finalmente, execute a fun√ß√£o main ass√≠ncrona
# Remova asyncio.run()
# asyncio.run(main())

# No ambiente Colab/Jupyter, voc√™ pode simplesmente aguardar a fun√ß√£o top-level
# Certifique-se de que a c√©lula do notebook suporta awaits de n√≠vel superior
# ou execute-o usando get_ipython().run_line_magic('autoawait', 'true') no in√≠cio
# if __name__ == "__main__": # Isso √© para scripts Python, n√£o ideal para notebooks
#     asyncio.run(main())

# Para executar em um notebook/Colab:
await main()

